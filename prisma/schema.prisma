datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int          @id @default(autoincrement())
  profilePicture  String?
  email           String       @unique
  firstName       String?
  lastName        String?
  gender          GenderType?
  dateOfBirth     DateTime?
  username        String       @unique
  password        String
  role            Role         @default(PUBLIC_USER)
  isActive        Boolean      @default(true)
  isPlatformAdmin Boolean      @default(false)
  preferences     Preference[] @relation("UserPreferences")

  // Relations
  institution      Institution? @relation("UserInstitution", fields: [institutionId], references: [id])
  institutionId    Int?
  institutionAdmin Institution? @relation("InstitutionAdmin")

  // Subscription relationships
  subscription UserSubscription[] @relation("UserSubscription")

  // Content relationships
  uploadedContent Content[]       @relation("Uploader")
  reviewedContent Content[]       @relation("Reviewer")
  notifications   Notification[]
  comments        Comment[]
  accessRequests  AccessRequest[] @relation("ReviewerAccessRequest")
  commentReports  CommentReport[]
  feedbacks       Feedback[]
  
   // Researcher access requests
  researchRequests AccessRequest[] @relation("ResearcherAccessRequest")

  // Uploads by type
  bookUploads     HistoricalBook[]    @relation("BookUploader")
  videoUploads    HistoricalVideo[]   @relation("VideoUploader")
  musicUploads    HistoricalMusic[]   @relation("MusicUploader")
  artifactUploads HistoricalPhoto[]   @relation("PhotoUploader")
  articleUploads  HistoricalArticle[] @relation("ArticleUploader")

  // Reviews by type
  bookReview     HistoricalBook[]    @relation("BookReviewer")
  videoReview    HistoricalVideo[]   @relation("VideoReviewer")
  musicReview    HistoricalMusic[]   @relation("MusicReviewer")
  artifactReview HistoricalPhoto[]   @relation("PhotoReviewer")
  articleReview  HistoricalArticle[] @relation("ArticleReviewer")

  // Edits by type
  contentEdits Content[] @relation("LastEditBy")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  HistoricalVideo HistoricalVideo[] @relation("VideoReviwer")

  HistoricalBook HistoricalBook[] @relation("VideoReviwer")

  HistoricalMusic HistoricalMusic[] @relation("VideoReviwer")

  HistoricalPhoto HistoricalPhoto[] @relation("VideoReviwer")

  HistoricalArticle HistoricalArticle[] @relation("VideoReviwer")
}

model Preference {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserPreferences")
}

model UserSubscription {
  id            Int              @id @default(autoincrement())
  startDate     DateTime         @default(now())
  endDate       DateTime
  Goesto        Boolean    // to check the freetrial user 
  isActive      Boolean          @default(true)
  userId        Int
  planId        Int
  transactionId String           @unique
  cancellationReason String?  
  // Relationships
  user          User             @relation("UserSubscription", fields: [userId], references: [id])
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
}

model SubscriptionPlan {
  id            Int                @id @default(autoincrement())
  name          PlanName
  features      String[]
  price         Float              @default(0)
  validity      DurationType?
  createdAt     DateTime           @default(now())
  freeTrial     Boolean            @default(false)
  trialDuration String?
  isActive      Boolean            @default(true)
  // Relationships
  subscriptions UserSubscription[]
}

model AccessRequest {
  id                         Int           @id @default(autoincrement())
  createdAt                  DateTime      @default(now())
  status                     RequestStatus
  userId                     Int
  contentId                  Int
  reviewerId                 Int?
  phoneNumber                String?
  researcherType             String?
  institutionName            String?
  positionTitle              String?
  proofOfAffiliation         String?
  proofOfIdentity            String?
  roleExplanation            String?
  researchTopic              String
  purposeOfResearch          String
  historicalContentRequested String
  intendedUse                String
  supportingDocuments        String?

  // Relationships
  researcher User    @relation("ResearcherAccessRequest", fields: [userId], references: [id])
  content    Content @relation(fields: [contentId], references: [id])
  reviewer   User?   @relation("ReviewerAccessRequest", fields: [reviewerId], references: [id])
}

model Institution {
  id                   Int                @id @default(autoincrement())
  registrationNumber   String?          
  name                 String
  address              Json?
  website              String?
  emailDomain          String?
  collaborationPurpose String?
  establishDate        DateTime
  numberOfEmploy       Int?
  document             String?
  photo                String?
  type                 InstitutionType?
  Phone                String
  registrationStatus   RegistrationStatus @default(PENDING)
  

  admin   User? @relation("InstitutionAdmin", fields: [adminId], references: [id])
  adminId Int?  @unique

  users   User[]    @relation("UserInstitution")
  content Content[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  rating    Int  

  // Relationships
  user User @relation(fields: [userId], references: [id])
}

model Content {
  id             Int             @id @default(autoincrement())
  title          String
  coverImage     String?
  description    String
  contentType    ContentType
  fileUrl        String?
  accessLevel    AccessLevel
  uploaderId     Int
  reviwerId      Int?
  institutionId  Int
  viewOnly       Boolean         @default(true)
  isFree         Boolean         @default(false)
  eventType      EventType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  isActive       Boolean         @default(false)
  lastEditBy     Int?
  lastEditDate   DateTime?
  numberOfViews     Int?      @default(0)
  numberOfLikes     Int?      @default(0)
  numberOfComments  Int?      @default(0)
  numberOfDislikes  Int?      @default(0)
  // Relationships
  uploader       User            @relation("Uploader", fields: [uploaderId], references: [id])
  reviwer        User?           @relation("Reviewer", fields: [reviwerId], references: [id])
  institution    Institution     @relation(fields: [institutionId], references: [id])
  accessRequests AccessRequest[]
  comments       Comment[]

  // Content-specific details (relations to specific models)
  bookDetails     HistoricalBook?    @relation("BookContentRelation", fields: [bookDetailsId], references: [id])
  videoDetails    HistoricalVideo?   @relation("VideoContentRelation", fields: [videoDetailsId], references: [id])
  musicDetails    HistoricalMusic?   @relation("MusicContentRelation", fields: [musicDetailsId], references: [id])
  artifactDetails HistoricalPhoto?   @relation("ArtifactContentRelation", fields: [artifactDetailsId], references: [id])
  articleDetails  HistoricalArticle? @relation("ArticleContentRelation", fields: [articleDetailsId], references: [id])

  // Unique identifiers for each specific content type
  bookDetailsId     Int? @unique
  videoDetailsId    Int? @unique
  musicDetailsId    Int? @unique
  artifactDetailsId Int? @unique
  articleDetailsId  Int? @unique

  User User[] @relation("LastEditBy")
}

model HistoricalVideo {
  id                 Int       @id @default(autoincrement())
  alternativeTitle   String
  language           String
  subtitles          String[]
  copyrightHolder    String?
  significance       String?
  historicalFigures  String[]  @default([])
  publisher          String
  director           String[]  @default([])
  producer           String[]  @default([])
  cameraman          String[]  @default([])
  cinematographer    String[]  @default([])
  cast               String[]  @default([])
  eventDate          DateTime?
  preservationStatus String?
  source             String?
  ageRating          String?
  location           String?
  resolution         String?
  duration           String?
  relatedArticles    String[]  @default([])
  publicationDate    DateTime?
  uploadedBy         Int
  reviwerBy          Int?
  uploadDate         DateTime  @default(now())

  uploader       User     @relation("VideoUploader", fields: [uploadedBy], references: [id])
  reviwer        User?    @relation("VideoReviwer", fields: [reviwerBy], references: [id])
  contentDetails Content? @relation("VideoContentRelation")
  User           User[]   @relation("VideoReviewer")

  @@index([uploadedBy])
  @@index([reviwerBy])
}

model HistoricalBook {
  id               Int       @id @default(autoincrement())
  alternativeTitle String?
  ISBN             String
  language         String?
  author           String?
  coAuthors        String[]  @default([])
  editor           String[]  @default([])
  numberOfPages    String?
  edition          String?
  bookType         String?
  publisher        String?
  significant      String?
  publicationDate  DateTime?
  copyrightHolder  String?
  uploadedBy       Int
  reviwerBy        Int?
  uploadDate       DateTime  @default(now())

  // Relationships
  uploader       User     @relation("BookUploader", fields: [uploadedBy], references: [id])
  reviwer        User?    @relation("VideoReviwer", fields: [reviwerBy], references: [id])
  contentDetails Content? @relation("BookContentRelation")
  User           User[]   @relation("BookReviewer")

  @@index([uploadedBy])
  @@index([reviwerBy])
}

model HistoricalMusic {
  id                Int       @id @default(autoincrement())
  alternativeTitle  String?
  language          String
  duration          String?
  composer          String?
  musicProducer     String?
  musicType         String?
  singer            String?
  additionalSinger  String[]  @default([])
  melodyAuthor      String[]  @default([])
  poemAuthor        String[]  @default([])
  instrument        String[]  @default([])
  instrumentPlayer  String[]  @default([])
  audioQuality      String?
  musicAlbum        String?
  musicNumber       String?
  recorder          String?
  eventDate         DateTime?
  historicalFigures String[]  @default([])
  location          String?
  significance      String?
  source            String?
  publicationDate   DateTime?
  copyrightHolder   String?
  relatedArticles   String[]  @default([])
  uploadedBy        Int
  reviwerBy         Int?
  uploadDate        DateTime  @default(now())

  // Relationships
  uploader       User     @relation("MusicUploader", fields: [uploadedBy], references: [id])
  reviwer        User?    @relation("VideoReviwer", fields: [reviwerBy], references: [id])
  contentDetails Content? @relation("MusicContentRelation")
  User           User[]   @relation("MusicReviewer")

  @@index([uploadedBy])
  @@index([reviwerBy])
}

model HistoricalPhoto {
  id                Int       @id @default(autoincrement())
  format            String?
  resolution        String?
  aspectRatio       String?
  photoLocation     String?
  capturedDate      DateTime?
  photographer      String?
  cameraMake        String?
  cameraModel       String?
  eventDate         DateTime?
  reviwerBy         Int?
  historicalFigures String[]
  significance      String?
  relatedArticles   String[]  @default([])
  

  // Relationships
  uploader       User     @relation("PhotoUploader", fields: [uploadedBy], references: [id])
  reviwer        User?    @relation("VideoReviwer", fields: [reviwerBy], references: [id])
  contentDetails Content? @relation("ArtifactContentRelation")

  uploadedBy Int
  uploadDate DateTime @default(now())
  User       User[]   @relation("PhotoReviewer")

  @@index([uploadedBy])
  @@index([reviwerBy])
}

model HistoricalArticle {
  id                Int       @id @default(autoincrement())
  alternativeTitle  String?
  language          String
  author            String
  coAuthors         String[]
  editor            String[]
  publisher         String
  publicationDate   DateTime
  eventDate         DateTime?
  location          String?
  eventType         String?
  significance      String?
  historicalFigures String[]
  Source            String?
  relatedArticles   String[]  @default([])
  uploadedBy        Int
  reviwerBy         Int?
  uploadDate        DateTime  @default(now())

  // Relationships
  uploader       User     @relation("ArticleUploader", fields: [uploadedBy], references: [id])
  reviwer        User?    @relation("VideoReviwer", fields: [reviwerBy], references: [id])
  contentDetails Content? @relation("ArticleContentRelation")
  User           User[]   @relation("ArticleReviewer")

  @@index([uploadedBy])
  @@index([reviwerBy])
}

model Comment {
  id        Int             @id @default(autoincrement())
  text      String
  createdAt DateTime        @default(now())
  userId    Int
  contentId Int
  parentId  Int? // No need for @default(null)
  likes     Int             @default(0)
  dislikes  Int             @default(0)
  isActive Boolean          @default(true)
  // Relationships
  user      User            @relation(fields: [userId], references: [id])
  content   Content         @relation(fields: [contentId], references: [id])
  parent    Comment?        @relation("ReplyToComment", fields: [parentId], references: [id])
  replies   Comment[]       @relation("ReplyToComment")
  reports   CommentReport[]
}

model CommentReport {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  reason            String
  resolved          Boolean  @default(false)
  userNotified      Boolean  @default(false)
  commentId         Int
  userId            Int
  additionalDetails String?
  // Relationships
  comment           Comment  @relation(fields: [commentId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
}



model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

enum DurationType {
  Weekly
  Monthly
  Yearly
  Other
}

enum PlanName {
  Heritage_Weekly
  Chronicle_Monthly
  Timekeepers_Yearly_Access
  Free_Trial
  Others
}

enum GenderType {
  FEMALE
  MALE
}

enum Role {
  PLATFORM_ADMIN
  PREMIUM_USER
  PUBLIC_USER
  RESEARCHER_USER
  INSTITUTION_ADMIN
  UPLOADER
  REVIEWER
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContentType {
  VIDEO
  BOOK
  ARTICLE
  MUSIC
  PHOTO
}

enum AccessLevel {
  Public
  Premium
  Researcher
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventType {
  WAR
  POLITICS
  RELIGION
  CULTURE
  FAMINE_CRISIS
  CIVIL_RIGHTS
  ECONOMY
  DIPLOMACY
  LEADERSHIP
  ETHNIC_MOVMENTS
}

enum InstitutionType {
  MUSEUM
  CHURCH
  LIBRARY
  SCHOOL
  OTHER
}

